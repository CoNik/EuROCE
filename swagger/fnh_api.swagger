swagger: "2.0"
info:
  description: ""
  version: "0.2.1a"
  title: "Fake News Hammer public API"
  termsOfService: "http://fakenewshammer.io/terms/"
  contact:
    email: "apiteam@fakenewshammer.io"
host: "api.fakenewshammer.io"
basePath: "/v2"
tags:
- name: "Public API"
  description: "Public API for case file queries"
  externalDocs:
    description: "Find out more"
    url: "http://fakenewshammer.io/about/api-docs/"
- name: "Case Files"
  description: "Protected website case file handling"
- name: "Targets"
  description: "Protected access to target database"
- name: "Users"
  description: "Protected operations about users"
schemes:
- "https"
- "http"
paths:
  /case-file/uuid/{UUID}:
    get:
      tags:
      - "Public API"
      summary: "Retrieves a specific case file from its UUID"
      description: ""
      operationId: "getCaseFile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "UUID"
        description: "The case file UUID"
        required: true
        type: string
      responses:
        200:
          description: "Case File found"
          schema:
            $ref: "#/definitions/Case-File"
        404:
          description: "UUID not found"
    put:
      tags:
      - "Case Files"
      summary: "Changes the properties of a specific case file"
      operationId: "editCaseFile"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "UUID"
        description: "The case file UUID"
        required: true
        type: string
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Case File found"
          schema:
            $ref: "#/definitions/Case-File"
        404:
          description: "UUID not found"
        400:
          description: "Invalid parameters"
      security:
      - fnh_auth:
        - write:case-files
        - read:case-files
  /case-file/search:
    get:
      tags:
      - "Public API"
      summary: "Search existing case files based on a specific parameter"
      operationId: "searchCaseFiles"
      produces:
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "hostnames"
        in: "query"
        description: "Hostnames to filter by"
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "geos"
        in: "query"
        description: "Geography to filter by"
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Case-File"
        400:
          description: "Invalid tag value"
  /targets/requestNew:
    post:
      tags:
      - "Public API"
      summary: "Request opening a case file based on a website URL"
      operationId: "findCaseFiles"
      produces:
      - "application/json"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "url"
        in: "formData"
        description: "URL to submit"
        required: true
        type: "string"
        format: "URI"
      responses:
        200:
          description: "Request sent"
        400:
          description: "Invalid parameter"
  /targets/{targetID}:
    get:
      tags:
      - "Targets"
      summary: "Gets the target based on its ID"
      operationId: "getTargetByID"
      produces:
      - "application/json"
      parameters:
      - name: "targetID"
        in: "path"
        description: "ID of target to return"
        required: true
        type: "integer"
      responses:
        200:
          description: "Target returned"
          schema:
            $ref: "#/definitions/Target"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Target not found"
      security:
      - fnh_auth:
        - read:targets
    put:
      tags:
      - "Targets"
      summary: "Changes the properties of a specific target"
      operationId: "editTarget"
      produces:
      - "application/json"
      parameters:
      - name: "targetID"
        in: "path"
        description: "ID of target to change"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Updated target object"
        required: true
        schema:
          $ref: "#/definitions/Target"
      responses:
        200:
          description: "Target returned"
          schema:
            $ref: "#/definitions/Target"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Target not found"
      security:
      - fnh_auth:
        - read:targets
        - write:targets
    delete:
      tags:
      - "Targets"
      summary: "Changes the properties of a specific target"
      operationId: "deleteTargets"
      produces:
      - "application/json"
      parameters:
      - name: "targetID"
        in: "path"
        description: "ID of target to delete"
        required: true
        type: "integer"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Target not found"
      security:
      - fnh_auth:
        - read:targets
        - write:targets
  /user/login:
    post:
      tags:
      - "Users"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "username"
        in: "formData"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "body"
        in: "formData"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "Users"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user:
    post:
      tags:
      - "Users"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      security:
      - fnh_auth:
        - read:users
        - write:users
  /user/{username}/:
    get:
      tags:
      - "Users"
      summary: "Get user by user name"
      operationId: "getUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      security:
      - fnh_auth:
        - read:users
    put:
      tags:
      - "Users"
      summary: "Change user"
      description: "This can only be done by the logged in user."
      operationId: "editUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      security:
      - fnh_auth:
        - read:users
        - write:users
    delete:
      tags:
      - "Users"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      security:
      - fnh_auth:
        - read:users
        - write:users
securityDefinitions:
  fnh_auth:
    type: "oauth2"
    authorizationUrl: "http://fakenewshammer.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:case-files: "Modifies the case-files in the database"
      read:case-files: "Reads the case-files in the database"
      append:targets: "Appends to the targets"
      write:targets: "Modifies the targets"
      read:targets: "Reads the targets"
      write:users: "Modifies the users"
      read:users: "Reads the users"
  fnh_api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Target:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      website:
        type: "string"
        format: "URI"
      strategy:
        type: "string"
        example: "news-please"
      reload:
        type: "string"
        description: "How often to reload this"
        enum:
        - "daily"
        - "hourly"
        - "weekly"
  Cluster:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      type:
        type: "string"
        enum:
        - "website-stack"
        - "authors"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
    xml:
      name: "Tag"
  Case-File:
    type: "object"
    properties:
      id:
        type: "integer"
      clusters:
        type: "array"
        items:
          $ref: "#/definitions/Cluster"
      case-files:
        type: "array"
        items:
          $ref: "#/definitions/Case-File"
      name:
        type: "string"
      url:
        type: "string"
        format: "URI"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
